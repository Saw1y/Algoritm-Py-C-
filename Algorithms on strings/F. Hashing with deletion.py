# Реализуйте структуру данных типа “множество строк”. Хранимые строки  – непустые последовательности  длиной не более 10 символов, 
# состоящие из строчных латинских букв. Структура данных должна поддерживать операции добавления строки в множество, 
# удаления строки из множества и проверки принадлежности данной строки множеству. 
# Максимальное количество элементов в хранимом множестве не превосходит 106.

# Входные данные
# Каждая строка входных данных задает одну операцию над множеством. 
# Запись операции состоит из типа операции и следующей за ним через пробел строки, над которой проводится операция.
# Тип операции  – один из трех символов:    +  означает добавление данной строки в множество; 
# -  означает удаление  строки из множества;      ?  означает проверку принадлежности данной строки множеству. 
# Общее количество операций во входном файле не превосходит 106. Список операций завершается строкой, в 
# которой записан один символ # – признак конца входных данных. При добавлении элемента в множество 
# НЕ ГАРАНТИРУЕТСЯ, что он отсутствует в этом множестве. При удалении элемента из множества НЕ ГАРАНТИРУЕТСЯ, 
# что он присутствует в этом множестве.

# Выходные данные
# Программа должна вывести для каждой операции типа ? одну из двух строк YES или NO, 
# в зависимости от того, встречается ли данное слово в нашем множестве.

class Hash_Set:
    def __init__(self):
        self.size = 10 ** 6
        self.table = [[] for _ in range(self.size)]

    def create_hash(self, s):
        hash_value = 0
        for char in s:
            hash_value += (hash_value * 31 + ord(char)) % self.size
        return hash_value % self.size

    def add_elem(self, s):
        index = self.create_hash(s)
        if s not in self.table[index]:
            self.table[index].append(s)

    def delete_elem(self, s):
        index = self.create_hash(s)
        if s in self.table[index]:
            self.table[index].remove(s)

    def check_elem(self, s):
        index = self.create_hash(s)
        return "YES" if s in self.table[index] else "NO"


data = Hash_Set()
while True:
    command = input()
    if command == '#':
        break
    op, s = command.split()
    if op == '+':
        data.add_elem(s)
    elif op == '-':
        data.delete_elem(s)
    elif op == '?':
        print(data.check_elem(s))
