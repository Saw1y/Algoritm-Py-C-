# –î–∞–Ω –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö.

# –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# –í–æ –≤—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –∑–∞–ø–∏—Å–∞–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞ ùëÅ
#  –∏ ùëÄ (0 < ùëÅ ‚â§ 100000, 0 ‚â§ ùëÄ ‚â§ 100000). –í —Å–ª–µ–¥—É—é—â–∏—Ö ùëÄ —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ –¥–≤–∞ —á–∏—Å–ª–∞ ùëñ –∏ ùëó(1 ‚â§ ùëñ, ùëó‚â§ ùëÅ), –∫–æ—Ç–æ—Ä—ã–µ –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ –≤–µ—Ä—à–∏–Ω—ã ùëñ–∏ ùëó —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Ä–µ–±—Ä–æ–º.

# –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏. –î–∞–ª–µ–µ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–∞–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: 
# –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ, –≤–æ –≤—Ç–æ—Ä–æ–π - —Å–∞–º–∏ –≤–µ—Ä—à–∏–Ω—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

import sys
sys.setrecursionlimit(200000)


n, m = map(int, input().split())

graph = {i + 1: set() for i in range(n)}
for _ in range(m):
    vertex, edge = map(int, input().split())
    graph[vertex].add(edge)
    graph[edge].add(vertex)


def dfs(start, component):
    visited[start] = True
    component.append(start)
    for v in graph[start]:
        if not visited[v]:
            dfs(v, component)


visited = [False] * (n + 1)
components = []

for i in range(1, n + 1):
    if not visited[i]:
        component = []
        dfs(i, component)
        components.append(component)

print(len(components))
for i in range(len(components)):
    print(len(components[i]))
    print(*components[i])
