# Дан неориентированный невзвешенный граф. Для него вам необходимо найти количество вершин, лежащих в одной компоненте связности с данной вершиной (считая эту вершину).

# Входные данные
# В первой строке входных данных содержатся два числа: N и S (1 ≤ N ≤ 100; 1 ≤ S ≤ N), где N – количество вершин графа, а S – заданная вершина. В следующих N строках записано по N чисел – матрица смежности графа, в которой 0 означает отсутствие ребра между вершинами, а 1 – его наличие. Гарантируется, что на главной диагонали матрицы всегда стоят нули.

# Выходные данные
# Выведите одно целое число – искомое количество вершин.

n, s = map(int, input().split())
graph = [[] for _ in range(n)]
for i in range(n):
    a = list(map(int, input().split()))
    for j in range(n):
        if a[j] == 1:
            graph[i].append(j)
visited = [False] * n


def dfs(start):
    visited[start] = True
    count = 1
    for v in graph[start]:
        if not visited[v]:
            count += dfs(v)
    return count


result = dfs(s - 1)
print(result)
