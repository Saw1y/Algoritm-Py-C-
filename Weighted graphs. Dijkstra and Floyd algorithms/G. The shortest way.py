# Дан ориентированный полный граф, рёбрам которого приписаны некоторые веса (длины). 
# Веса могут быть и положительные, и отрицательные, и нулевые. Нас интересует минимум длин всех возможных путей между всеми парами 
# различных вершин этого графа. Нужно будет выяснить, существует ли этот минимум, и, если существует, вычислить его. (
# Минимума не существует в том случае, если в графе можно найти путь отрицательной длины, сколь угодно большой по модулю).

# Входные данные
# В первой строке задано число вершин N≤50. Далее идёт матрица смежности графа, то есть N строк, в каждой из которых записано N чисел. 
# j-ое число в i-ой строке матрицы смежности задает длину ребра, ведущего из i-й вершину в j-ую. 
# Длины могут принимать любые значения от -1000000 до 1000000. Гарантируется, что на главной диагонали матрицы стоят нули.

# Выходные данные
# Выведите одно число – искомый минимум. Если его не существует, выведите  -1.

def floyd(graph, n):
    dist = [[float("inf") for _ in range(n)] for _ in range(n)]

    for i in range(n):
        for j in range(n):
            if graph[i][j] != -1:
                dist[i][j] = graph[i][j]
            if i == j:
                dist[i][j] = 0

    for k in range(n):
        for i in range(n):
            for j in range(n):
                new_dist = dist[i][k] + dist[k][j]
                if new_dist < dist[i][j]:
                    dist[i][j] = new_dist
                    if i == j and new_dist < 0:
                        return -1

    return dist


n = int(input())
graph = list(list(map(int, input().split())) for _ in range(n))

result = floyd(graph, n)

if result == -1:
    print(-1)

else:
    min_dist = float('inf')
    for i in range(n):
        for j in range(n):
            if i != j:
                min_dist = min(min_dist, result[i][j])
    print(min_dist)
