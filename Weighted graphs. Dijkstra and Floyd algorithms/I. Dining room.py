# –°–µ–≥–æ–¥–Ω—è —É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–∞–∑–¥–Ω–∏–∫! –í –æ–¥–Ω–æ–º –∏–∑ –Ω–æ–≤—ã—Ö –∑–¥–∞–Ω–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ —Ä–µ—à–∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–æ–≤—É—é. 
# –î–ª—è —ç—Ç–∏—Ö —Ü–µ–ª–µ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –∑–¥–∞–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è —Å—Ç–æ–ª–æ–≤–∞—è. 
# –ß—Ç–æ–±—ã —Å—Ç—É–¥–µ–Ω—Ç—ã –∫–∞–∫ –º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ –æ—Ç–≤–ª–µ–∫–∞–ª–∏—Å—å –æ—Ç —É—á—ë–±—ã, –±—ã–ª–æ —Ä–µ—à–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–∫–æ–µ –∑–¥–∞–Ω–∏–µ, 
# —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ –¥–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –±—ã–ª–æ –∫–∞–∫ –º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ.

# –ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –∑–¥–∞–Ω–∏–µ!

# –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–µ ùëÅ
#  –∏ ùëÄ- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–∞–Ω–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–≥, —Å–æ–µ–¥–∏–Ω—è—é—â–∏—Ö –∑–¥–∞–Ω–∏—è (1‚â§ùëÅ‚â§100,0‚â§ùëÄ‚â§ùëÅ‚ãÖ(ùëÅ‚àí1)2
# ). –î–∞–ª–µ–µ –≤ ùëÄ—Å—Ç—Ä–æ–∫–∞—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ—Ä–æ–≥: 3 —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ ùë†ùëñ, ùëíùëñ, ùëôùëñ
#  - –∑–¥–∞–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–æ—Ä–æ–≥–∞ –∏ –¥–ª–∏–Ω–∞ –¥–æ—Ä–æ–≥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (1‚â§ùë†ùëñ,ùëíùëñ‚â§ùëÅ,0‚â§ùëôùëñ‚â§100, –¥–æ—Ä–æ–≥–∏ –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ).

# –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –Ω–æ–º–µ—Ä –∏—Å–∫–æ–º–æ–≥–æ –∑–¥–∞–Ω–∏—è. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–¥–∞–Ω–∏–π —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –∑–¥–∞–Ω–∏–µ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –Ω–æ–º–µ—Ä–æ–º.

def floyd(graph, n):
    dist = [[float("inf") for _ in range(n)] for _ in range(n)]

    for i in range(n):
        for j in range(n):
            if graph[i][j] != -1:
                dist[i][j] = graph[i][j]
            if i == j:
                dist[i][j] = 0

    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    return dist


n, m = map(int, input().split())
graph = [[0] * n for _ in range(n)]

for i in range(n):
    for j in range(n):
        if i == j:
            graph[i][j] = 0
        else:
            graph[i][j] = -1


for _ in range(m):
    s, e, w = map(int, input().split())
    graph[s - 1][e - 1] = w
    graph[e - 1][s - 1] = w
res = floyd(graph, n)

num = 0
mn = float("inf")
for i in range(n):
    temp = max(res[i])
    if temp < mn:
        num = i
        mn = temp
print(num + 1)
