# В левом верхнем углу прямоугольной таблицы размером N×M находится черепашка. 
# В каждой клетке таблицы записано некоторое число. Черепашка может перемещаться вправо или вниз, 
# при этом маршрут черепашки заканчивается в правом нижнем углу таблицы.

# Подсчитаем сумму чисел, записанных в клетках, через которую проползла черепашка 
# (включая начальную и конечную клетку). Найдите наибольшее возможное значение этой суммы и маршрут, на котором достигается эта сумма.

# Входные данные
# В первой строке входных данных записаны два натуральных числа N и M, не превосходящих 100 — размеры таблицы. 
# Далее идет N строк, каждая из которых содержит M чисел, разделенных пробелами — описание таблицы. 
# Все числа в клетках таблицы целые и могут принимать значения от 0 до 100.

# Выходные данные
# Первая строка выходных данных содержит максимальную возможную сумму, вторая – маршрут, на котором достигается эта сумма.
# Маршрут выводится в виде последовательности, которая должна содержать N-1 букву D, означающую передвижение вниз и M-1 букву R, 
# означающую передвижение направо. Если таких последовательностей несколько, необходимо вывести ровно одну (любую) из них.

n, m = map(int, input().split())
price = [[] for _ in range(n)]

for i in range(n):
    price[i] = list(map(int, input().split()))

for i in range(n):
    for j in range(m):
        if i - 1 > -1 and j - 1 > -1:
            price[i][j] += max(price[i - 1][j], price[i][j - 1])
        elif i - 1 > -1:
            price[i][j] += price[i - 1][j]
        elif j - 1 > -1:
            price[i][j] += price[i][j - 1]

i, j = n - 1, m - 1
path = []
while i != 0 or j != 0:
    if i > 0 and j > 0:
        if price[i - 1][j] > price[i][j - 1]:
            path.append("D")
            i -= 1
        else:
            path.append("R")
            j -= 1
    elif i > 0:
        path.append("D")
        i -= 1
    elif j > 0:
        j -= 1
        path.append("R")
path.reverse()
print(price[n - 1][m - 1])

print(*path)
