// После затянувшегося совещания директор фирмы решил заказать такси,чтобы развезти сотрудников по домам.
// Он заказал N машин —ровно столько, сколь у него сотрудников.Однако когда они подъехали, оказалось, что у каждого водителя такси свой тариф за 1 километр.
// Директор знает, какому сотруднику сколько километров от работы до дома (к сожалению, все сотрудники живут в разных направлениях, поэтому нельзя отправить двух сотрудников на одной машине). 
// Теперь директор хочет определить, сколько придется заплатить за перевозку всех сотрудников. Естественно, директор хочет заплатить как можно меньшую сумму.

// Входные данные
// В первой строке записаны N
//  чисел через пробел, задающих расстояния в километрах от работы до домов сотрудников компании. Во второй строке записаны N
//  чисел — тарифы за проезд одного километра в такси.

// Выходные данные
// Выведите одно целое число — наименьшую сумму, которую придется заплатить за доставку всех сотрудников.\

#include <iostream>
#include <vector>
using namespace std;

void Bublesort(vector<int> & arr, int n, char sort){
    bool swapped = false;
    for(int i = 0; i < n - 1; i++){
        swapped = false;
        for(int j = 0; j < n - i - 1; j++){
            if (sort == '>'){
                if(arr[j] > arr[j+1]){
                    swapped = true;
                    swap(arr[j], arr[j+1]);
                }
            }
            else{
                if(arr[j] < arr[j+1]){
                    swapped = true;
                    swap(arr[j], arr[j+1]);
                }
            }
        }
        if(swapped == false){
            break;
        }
    }
}

int main(){
    int x, n, res;
    res = 0;
    vector<int> arr3;
    while (cin >> x){
        arr3.push_back(x);
    }
    n = arr3.size();
    n = n / 2; 
    vector<int> arr1(n);
    vector<int> arr2(n);
    for (int i = 0; i < n;i++){
        arr1[i] = arr3[i];
        arr2[i] = arr3[i+n];
    }
    Bublesort(arr1, n, '>');
    Bublesort(arr2, n, '<');
    for (int i = 0; i < n; i++){
        res += arr1[i] * arr2[i];
    }

    cout << res;
    return 0;
}
